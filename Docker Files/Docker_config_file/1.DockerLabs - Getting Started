
GETTING STARTED
===============

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Common Commands:
  run         Create and run a new container from an image
  exec        Execute a command in a running container
  ps          List containers
  build       Build an image from a Dockerfile
  pull        Download an image from a registry
  push        Upload an image to a registry
  images      List images
  login       Log in to a registry
  logout      Log out from a registry
  search      Search Docker Hub for images
  version     Show the Docker version information
  info        Display system-wide information

Management Commands:
  builder     Manage builds
  buildx*     Docker Buildx (Docker Inc., v0.0.0+unknown)
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  plugin      Manage plugins
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Swarm Commands:
  swarm       Manage Swarm

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  wait        Block until one or more containers stop, then print their exit codes

Global Options:
      --config string      Location of client config files (default "/root/.docker")
  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var
                           and default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket to connect to
  -l, --log-level string   Set the logging level ("debug", "info", "warn", "error", "fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/root/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/root/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/root/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Run 'docker COMMAND --help' for more information on a command.

For more help on how to use Docker, head to https://docs.docker.com/go/guides/

======================================================================================================================================
Note - 1. You should have Linux Server running and connected. We are provisioning AWS EC2 Linux for lab.
		  Make sure you are logged in to AWS EC2 with ec2-user and change user to root by command "sudo su"
		  
		  Or You can install docker desktop application on laptop to perform the labs

	   2. If you are using AWS EC2 AMI for docker labs, then please run below command to stop HTTPD server which is running on 80 port

			systemctl stop httpd
			systemctl status httpd
			
	   3. If you have dockerhub login created, then you can use play with docker platform for labs.
	   
			https://labs.play-with-docker.com/

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*** DOCKER INSTALLATION ON LINUX AMAZON EC2 ***
================================================

1. yum install docker -y 

2. systemctl start docker

3. systemctl status docker

4. docker --version
   docker system info

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*** DOCKER INSTALLATION ON UBUNTU AMAZON EC2 *** (Optional)
===========================================================

Please follow the below URL for installation steps on ubuntu

https://docs.docker.com/engine/install/ubuntu/

Or

Run below commands step by step

1. apt-get update
 
2. apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
  
3. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
 
4. echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
 
5. apt-get update
6. apt-get install docker-ce docker-ce-cli containerd.io
 
7. systemctl status docker
8. docker --version
   docker system info


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*** DOCKER INSTALLATION ON WINDOWS - DOCKER DESKTOP ***
========================================================

1. Please download windows Docker desktop installer from below link

https://docs.docker.com/desktop/windows/install/

2. Install docker desktop application
3. Launch Docker desktop application

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*** QUICK UNDERSTANDING OF DOCKER IMAGES ***
============================================

docker pull nginx  
docker images ls
docker pull ubuntu
docker images ls

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*** QUICK UNDERSTANDING OF CONTAINER ***
========================================

docker run -dt --name demo nginx    //dt means--detach 
docker ps
docker ps -a

docker stop demo 
docker rm demo
docker ps

docker container run -dt nginx
docker container stop <container id>
docker container rm <container id>
docker image rm nginx  OR
docker rmi <name>
docker images

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*** PORT BINDING ***
====================
enable port in SG AWS

docker container run -dt --name mydemo -p 8080:80 nginx
docker ps
netstat -ntlp
curl localhost:8080 or access through browser http://<public IP of host>:8080
docker container stop mydemo
docker container rm mydemo
docker ps

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*** ATTACHED AND DETACHED MODE ***
===================================

-----Attached Mode ------

docker container run --name mydemo -p 8888:80 nginx 
access through browser http://<public IP of host>:8888 
Press CtL +C to terminate the container and go to the bash

docker container stop mydemo
docker container rm mydemo
docker ps

-----Detached Mode ------

docker container run -dt --name mydemo -p 8080:80 nginx
curl localhost:8080 or access through browser http://<public IP of host>:8080

docker container stop mydemo
docker container rm mydemo
docker ps

docker rm -f $(docker ps -aq)    --to delete container directly and at onces

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

*** CONTAINER LOGIN ***
=======================

docker container run -dt --name mydemo -p 8080:80 nginx                 ## create container with port access
docker container exec -it mydemo ls                                     ## to list the container from outside
docker container exec -it mydemo uname -a                               ## give output from outside of container
docker container exec -it mydemo touch /tmp/myfile.txt    
docker container exec -it mydemo bash                                   ##for login cmd
ls -lrt /tmp/myfile.txt
exit
docker container stop mydemo
docker container rm mydemo
docker ps


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

